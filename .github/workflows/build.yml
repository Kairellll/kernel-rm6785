name: "Build kernels"

env: OUT_DIR: "out"

on: workflow_dispatch: inputs: kernelSourceURL: description: "Custom kernel source URL" required: true type: string default: "https://github.com/realme-mt6785-devs/android_kernel_realme_mt6785" kernelBranch: description: "Branch kernel" required: true type: string default: "main" kernelSourceName: description: "Name folder source" required: true type: string default: "kernel" kernelDevice: description: "Device codename" required: true type: string default: "rm6785" clangURL: description: "Clang URL" required: true type: string default: "https://github.com/kdrag0n/proton-clang.git"

jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4

- name: Install dependencies
    run: |
      sudo apt-get update
      sudo apt-get install -y bc bison build-essential cpio curl flex git \
      kmod libssl-dev libncurses5-dev libelf-dev python3 unzip zip

  - name: Clone kernel source
    run: |
      git clone --depth=1 --branch ${{ github.event.inputs.kernelBranch }} ${{ github.event.inputs.kernelSourceURL }} ${{ github.event.inputs.kernelSourceName }}

  - name: Clone clang
    run: |
      git clone --depth=1 ${{ github.event.inputs.clangURL }} clang

  - name: Build kernel
    run: |
      export PATH="${PWD}/clang/bin:$PATH"
      export ARCH=arm64
      export SUBARCH=arm64
      make -C ${{ github.event.inputs.kernelSourceName }} O=${{ env.OUT_DIR }} ARCH=arm64 custom_defconfig
      cp ${{ github.event.inputs.kernelSourceName }}/arch/arm64/configs/custom_defconfig ${{ env.OUT_DIR }}/.config
      make -C ${{ github.event.inputs.kernelSourceName }} O=${{ env.OUT_DIR }} ARCH=arm64 CC=clang olddefconfig
      make -C ${{ github.event.inputs.kernelSourceName }} O=${{ env.OUT_DIR }} -j$(nproc) ARCH=arm64 CC=clang

  - name: Check output
    run: ls -al ${{ env.OUT_DIR }}/arch/arm64/boot

  - name: Clone AnyKernel3
    run: |
      git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git
      cp ${{ env.OUT_DIR }}/arch/arm64/boot/Image* AnyKernel3/ || true
      cp ${{ env.OUT_DIR }}/arch/arm64/boot/dtbo.img AnyKernel3/ || true

  - name: Create flashable zip
    run: |
      cd AnyKernel3
      zip -r9 ../kernel-flashable.zip .

  - name: Upload zip artifact
    uses: actions/upload-artifact@v4
    with:
      name: kernel-flashable
      path: kernel-flashable.zip

