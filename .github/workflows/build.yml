name: Build Kernel RM6785

env: OUT_DIR: out

on: workflow_dispatch: inputs: kernelSourceName: description: "Name of kernel source" required: true default: "kernel-rm6785" kernelSourceURL: description: "URL of kernel source" required: true default: "https://github.com/Kairellll/kernel-rm6785" kernelBranch: description: "Branch to build" required: true default: "main" withKernelSU: description: "Include KernelSU support" required: false type: boolean default: true

jobs: build: name: Compile Kernel runs-on: ubuntu-latest steps: - name: Checkout source uses: actions/checkout@v4

- name: Install dependencies
  run: |
    sudo apt-get update
    sudo apt-get install -y bc bison build-essential cpio curl flex git kmod libssl-dev libncurses5-dev libelf-dev python3 unzip zip

- name: Clone toolchain (proton clang)
  run: |
    git clone --depth=1 https://github.com/kdrag0n/proton-clang.git clang

- name: Build kernel
  run: |
    export PATH="${PWD}/clang/bin:$PATH"
    export ARCH=arm64
    export SUBARCH=arm64

    mkdir -p out
    cp arch/arm64/configs/custom_defconfig out/.config
    make O=out ARCH=arm64 olddefconfig

    if [ "${{ github.event.inputs.withKernelSU }}" == "true" ]; then
      echo ">>> Cloning KernelSU..."
      curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash
    fi

    make -j$(nproc) O=out \
      ARCH=arm64 \
      CC=clang \
      HOSTCC=gcc \
      HOSTCXX=g++ \
      LD=ld.lld

- name: Check output
  run: |
    ls out/arch/arm64/boot/

- name: Clone AnyKernel3
  run: |
    git clone --depth=1 https://github.com/Kairellll/AnyKernel3.git
    cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/

- name: Zip kernel
  run: |
    cd AnyKernel3
    zip -r9 ../Kernel-RM6785.zip ./*

- name: Upload kernel zip
  uses: actions/upload-artifact@v3
  with:
    name: Kernel-RM6785
    path: Kernel-RM6785.zip

